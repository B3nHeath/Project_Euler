# lets make an example where we test whether it is the largest product of 3 digits in the number
import numpy

code = "731671765313306249192251196744265747423553491949349698352031277450632623957831801698480186947885184385861560789112949495459501737958331952853208805511125406987471585238630507156932909632952274430435576689664895044524523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
res = [int(x) for x in code]
largest = 0
pos = 0

for i in res:
    sub = res[pos:pos+13]
    pos += 1
    if numpy.prod(sub) > largest:
        largest = numpy.prod(sub)
    else:
        continue

print(largest)

## Solved it, but this is someone elses dynamic solution. It looks really cool and I'm wondering how it works


series = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"


def greatest_product(series, nth_adjacent_digit):

    max_adjacent = 0
    max_tmp = 1
    digit_counter = 0

    index = 0
    while index < len(series):

        max_tmp *= int(series[index])
        digit_counter += 1
        index += 1

        if digit_counter == nth_adjacent_digit:

            max_adjacent = max_tmp if max_tmp > max_adjacent else max_adjacent

            max_tmp = 1
            digit_counter = 0
            index -= nth_adjacent_digit-1

    return max_adjacent


nth_adjacent_digit = 13
print(greatest_product(series, nth_adjacent_digit))  # 23514624000
